/*
 * DvRlib - Local search
 * Copyright (C) Duncan van Roermund, 2013
 * BinarySearchOffspringSelector.java
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see <http://www.gnu.org/licenses/>.
 */

package dvrlib.localsearch;

import java.util.NavigableSet;

public class BinarySearchOffspringSelector<S extends Solution, E extends Comparable<E>> implements OffspringSelector<S, E> {
   /**
    * Selects the solution that will be added to the population from the given offspring.
    * @param ss        The current state of the genetic search algorithm.
    * @param offspring The set of solutions generated by the combiner.
    * @param best      The current worst solution in the population; any solutions that are not an improvement over this can be ignored. Can be <code>null</code>.
    */
   public S select(GeneticLS<S, E>.SearchState ss, NavigableSet<S> offspring, S best) {
      int searchDir = LocalSearch.asNumber(ss.problem.direction());
      if(best == null)
         best = (searchDir > 0 ? offspring.first() : offspring.last());
      offspring = (searchDir > 0 ? offspring.tailSet(best, false) : offspring.headSet(best, false));
      while(!offspring.isEmpty()) {
         java.util.Iterator<S> it = offspring.iterator();
         for(int i = 0; i < offspring.size() / 2; i++) {
            it.next();
         }
         S next = it.next();
         if(ss.problem.better(ss.problem.evaluationBound(next), best) && ss.problem.better(next, best)) {
            best = next;
            offspring = (searchDir > 0 ? offspring.tailSet(best, false) : offspring.headSet(best, false));
         }
         else
            offspring = (searchDir > 0 ? offspring.headSet(next, false) : offspring.tailSet(next, false));
      }
      return best;
   }
}
