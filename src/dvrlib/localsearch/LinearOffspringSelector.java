/*
 * DvRlib - Local search
 * Copyright (C) Duncan van Roermund, 2013
 * LinearOffspringSelector.java
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see <http://www.gnu.org/licenses/>.
 */

package dvrlib.localsearch;

public class LinearOffspringSelector<S extends Solution, E extends Comparable<E>> implements OffspringSelector<S, E> {
   /**
    * Defines the strategy for which solution to accept from a set of solutions generated by the combiner.
    *   OverallBest:            evaluate all solutions and select the best -- use this if there is no ordering on the solutions;
    *   FirstImprovingFromBest: start from the best and stop at the first solution that is an improvement to the current population;
    *   LastImprovingFromWorst: start from the worst and continue until a non-improving solution is encountered;
    */
   public enum Strategy { OverallBest, FirstImprovingFromBest, LastImprovingFromWorst };

   protected final Strategy strategy;

   public LinearOffspringSelector(Strategy strategy) {
      this.strategy = strategy;
   }

   /**
    * Selects the solution that will be added to the population from the given offspring.
    * @param ss        The current state of the genetic search algorithm.
    * @param offspring The set of solutions generated by the combiner.
    * @param current   The current worst solution in the population; any solutions that are not an improvement over this can be ignored. Can be <code>null</code>.
    */
   public S select(GeneticLS<S, E>.SearchState ss, java.util.NavigableSet<S> offspring, S current) {
      // Iterate over the offspring to select one, depending on the chosen strategy
      int searchDir = LocalSearch.asNumber(ss.problem.direction());
      for(S s : (searchDir > 0 ^ strategy == Strategy.FirstImprovingFromBest ? offspring : offspring.descendingSet())) {
         if(current == null) {
            current = s;
            continue;
         }
         if(ss.population.contains(s))
            continue;
         if(ss.problem.better(ss.problem.evaluationBound(s), current) && ss.problem.better(s, current)) {
            current = s;
            if(strategy == Strategy.FirstImprovingFromBest)
               break;
         }
         else if(strategy == Strategy.LastImprovingFromWorst)
            break;
      }
      return current;
   }
}
